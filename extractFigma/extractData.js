import fs from "fs";

const figmaData = JSON.parse(fs.readFileSync("figmaData.json", "utf8"));
const TARGET_PAGE = "pc";
const FIGMA_IMAGE_BASE_URL = "https://figma-alpha-api.s3.us-west-2.amazonaws.com/images/";

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
function findPage(document, pageName) {
  return document.children.find((page) => page.name.toLowerCase() === pageName.toLowerCase());
}

// –§—É–Ω–∫—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
function extractData(node, textSet = new Set(), imageCollection = [], vectorCollection = []) {
  if (node.type === "TEXT" && node.characters) {
    let cleanedText = node.characters.replace(/[\r\n]+/g, " ").trim();
    if (cleanedText.length >= 10) {
      textSet.add(cleanedText);
    }
  }

  // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è PNG, JPG
  // if (node.type === "RECTANGLE" && node.fills) {
  //   const imageFill = node.fills.find((fill) => fill.type === "IMAGE" && fill.imageRef);
  //   if (imageFill) {
  //     imageCollection.push({
  //       id: node.id,
  //       name: node.name || `image_${node.id}`,
  //     });
  //   }
  // }

  // üî• –¢–µ–ø–µ—Ä—å –∏—â–µ–º –∫–∞—Ä—Ç–∏–Ω–∫–∏ –í–ï–ó–î–ï (–≤ —Ç–æ–º —á–∏—Å–ª–µ –≤ FILL)
  if (node.fills) {
    const imageFill = node.fills.find((fill) => fill.type === "IMAGE" && fill.imageRef);
    if (imageFill) {
      console.log(`üé® Fill —É ${node.name || node.id}:`, JSON.stringify(node.fills, null, 2));
      images.push({ id: node.id, name: node.name || `image_${node.id}` });
    }
  }

  // –í–µ–∫—Ç–æ—Ä–Ω—ã–µ –∏–∫–æ–Ω–∫–∏ (SVG)
  if (node.type === "VECTOR") {
    vectorCollection.push({
      id: node.id,
      name: node.name || `vector_${node.id}`,
    });
  }

  if (node.children) {
    node.children.forEach((child) => extractData(child, textSet, imageCollection, vectorCollection));
  }

  return { textSet, imageCollection, vectorCollection };
}

// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É "pc"
const pcPage = findPage(figmaData.document, TARGET_PAGE);
if (!pcPage) {
  console.error(`–°—Ç—Ä–∞–Ω–∏—Ü–∞ "${TARGET_PAGE}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.`);
  process.exit(1);
}

// –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –≤–µ–∫—Ç–æ—Ä—ã
const { textSet, imageCollection, vectorCollection } = extractData(pcPage);

// –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç
fs.writeFileSync("extractedText.json", JSON.stringify([...textSet], null, 2));
console.log(`–£–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–∑–≤–ª–µ—á—ë–Ω: ${textSet.size} —Å—Ç—Ä–æ–∫`);

// –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è PNG/JPG
fs.writeFileSync("extractedImageIds.json", JSON.stringify(imageCollection, null, 2));
console.log(`PNG/JPG –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑–≤–ª–µ—á–µ–Ω—ã: ${imageCollection.length} –∑–∞–ø–∏—Å–µ–π`);

// –ó–∞–ø–∏—Å—ã–≤–∞–µ–º SVG-–∏–∫–æ–Ω–∫–∏
fs.writeFileSync("extractedVectors.json", JSON.stringify(vectorCollection, null, 2));
console.log(`SVG-–∏–∫–æ–Ω–∫–∏ –∏–∑–≤–ª–µ—á–µ–Ω—ã: ${vectorCollection.length} –∑–∞–ø–∏—Å–µ–π`);
