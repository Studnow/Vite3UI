import fs from "fs";
import path from "path";
import { DOMParser } from "xmldom";

// üîπ –ü–∞–ø–∫–∞ —Å SVG-–∏–∫–æ–Ω–∫–∞–º–∏
const iconsDir = "icons";

// üîπ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤ SVG
function getSvgDimensions(svgContent) {
  try {
    const doc = new DOMParser().parseFromString(svgContent, "image/svg+xml");
    const svgTag = doc.documentElement;

    const width = svgTag.getAttribute("width") || "unknown";
    const height = svgTag.getAttribute("height") || "unknown";

    return { width, height };
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è SVG:", error);
    return { width: "error", height: "error" };
  }
}

// üîπ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–æ —Ä–∞–∑–º–µ—Ä–∞–º
function filterDuplicatesBySize() {
  const svgFiles = fs.readdirSync(iconsDir).filter((file) => file.endsWith(".svg"));
  const uniqueFiles = new Map();

  for (const file of svgFiles) {
    const filePath = path.join(iconsDir, file);
    const svgContent = fs.readFileSync(filePath, "utf8");
    const { width, height } = getSvgDimensions(svgContent);

    const key = `${width}x${height}`;
    if (uniqueFiles.has(key)) {
      console.log(`üöÆ –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç (—Ä–∞–∑–º–µ—Ä ${key}): ${file}`);
      fs.unlinkSync(filePath);
    } else {
      uniqueFiles.set(key, file);
    }
  }

  console.log("üéâ –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–∫–æ–Ω–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.");
}

// üöÄ –ó–∞–ø—É—Å–∫ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
filterDuplicatesBySize();
