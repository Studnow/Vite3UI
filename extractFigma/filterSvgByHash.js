import fs from "fs";
import path from "path";
import crypto from "crypto";

// üîπ –ü–∞–ø–∫–∞ —Å SVG-–∏–∫–æ–Ω–∫–∞–º–∏
const iconsDir = "icons";

// üîπ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ö–µ—à–∞ —Ñ–∞–π–ª–∞
function getFileHash(filePath) {
  const content = fs.readFileSync(filePath);
  return crypto.createHash("md5").update(content).digest("hex");
}

// üîπ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–æ —Ö–µ—à—É
function filterDuplicatesByHash() {
  const svgFiles = fs.readdirSync(iconsDir).filter((file) => file.endsWith(".svg"));
  const uniqueHashes = new Map();

  for (const file of svgFiles) {
    const filePath = path.join(iconsDir, file);
    const fileHash = getFileHash(filePath);

    if (uniqueHashes.has(fileHash)) {
      console.log(`üöÆ –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç (—Ö–µ—à ${fileHash}): ${file}`);
      fs.unlinkSync(filePath);
    } else {
      uniqueHashes.set(fileHash, file);
    }
  }

  console.log("üéâ –î—É–±–ª–∏–∫–∞—Ç—ã –ø–æ —Ö–µ—à—É —É–¥–∞–ª–µ–Ω—ã.");
}

// üöÄ –ó–∞–ø—É—Å–∫
filterDuplicatesByHash();
